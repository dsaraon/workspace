package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Map;

import general.*;

/**
 * Database class for the DevChat group project. This class runs the JDBC
 * connection for the server and contains all methods for communicating
 * with the postgresql database. All SQL commands are written as prepared
 * statements for the ease of interchangeable variables.
 * @author Sam Joseph (stj485)
 *
 */
public class Database implements Queries {

	private static final String URL = "jdbc:postgresql://localhost/dev_chat"; // change as needed
	private static final String USERNAME = ""; // change as needed
	private static final String PASSWORD = ""; // change as needed
	
	private Connection connection = null;
	
	// PreparedStatements initialised
	private PreparedStatement checkLogin = null;
	private PreparedStatement nextUserID = null;
	private PreparedStatement isUsernameFree = null;
	private PreparedStatement getPrivateChat = null;
	private PreparedStatement createAccount = null;
	private PreparedStatement getAccount = null;
	private PreparedStatement allUsers = null;
	private PreparedStatement createPrivateChat = null;
	private PreparedStatement createTeamChat = null;
	private PreparedStatement storePrivateMessage = null;
	private PreparedStatement storeTeamMessage = null;
	private PreparedStatement getChatParticipants = null;
	private PreparedStatement getChatHistory = null;
	
//	/**
//	 * main method for test purposes. Remove as needed
//	 */
//	public static void main(String[] args) {
//		Database d = new Database();
//		System.out.println(d.login("test", "password"));
//	}
	
	/**
	 * Constructor initialises connection and sets text for prepared statements.
	 * 
	 * Need to think about how to re-establish connections if needed
	 */
	public Database() {
		try {
			//connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
			connection = DriverManager.getConnection(URL);
			checkLogin = connection.prepareStatement("SELECT user_ID FROM users WHERE username = ? AND password = ?");
			isUsernameFree = connection.prepareStatement("SELECT user_ID FROM users WHERE username = ?");
			getPrivateChat = connection.prepareStatement("SElECT chat_ID from private_chat WHERE user1 = ? AND user 2 = ?");
			createPrivateChat = connection.prepareStatement("INSERT INTO private_chat (user1, user2) VALUES (?, ?)");
			storePrivateMessage = connection.prepareStatement("INSERT INTO private_messages "
													+ "(chat_id, message_sent, user_poster, text) VALUES (?, ?, ?, ?)");
			System.out.println("Connected");
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			System.out.println("not connected");
			System.exit(1);
		}
	}

	@Override
	public int login(String username, String password) {
		ResultSet resultSet = null;
		try {
			checkLogin.setString(1, username);
			checkLogin.setString(2, password);
			resultSet = checkLogin.executeQuery();
			if (resultSet.next()) { 
				return resultSet.getInt("user_id");
			}
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return -1; // do we want to return something else if there is an error?
	}

	@Override
	public boolean usernameFree(String username) {
		ResultSet resultSet = null;
		try {
			isUsernameFree.setString(1, username);
			resultSet = isUsernameFree.executeQuery();
			if (!resultSet.isBeforeFirst() ) { // checks if there result set contains anything
				 return true; // resultSet does not contain rows
				} 
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return false;
	}

	@Override
	public int createPrivateChat(String username1, String username2) {
		ResultSet resultSet = null;
		try {
			getPrivateChat.setString(1, username1); 
			getPrivateChat.setString(2, username2); 
			resultSet = getPrivateChat.executeQuery();
			if (resultSet.next()) {
				return resultSet.getInt("chat_id"); // chat already exists
				}
			createPrivateChat.setString(1, username1);
			createPrivateChat.setString(2, username2);
			createPrivateChat.executeUpdate();
			resultSet = getPrivateChat.executeQuery();
			resultSet.next();
			return resultSet.getInt("chat_id"); 
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return -1;
	}

	@Override
	public int createTeam(String... usernames) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean savePrivateMessage(ChatMessage chatMessage, boolean delivered) {
		try {
			// ChatMessage needs updating
			storePrivateMessage.setInt(1, chatMessage.getID());
			storePrivateMessage.setString(2, chatMessage.getUsername());
			storePrivateMessage.setLong(3, chatMessage.getDate().getTime());
			storePrivateMessage.setString(4, chatMessage.getMessage());
			storePrivateMessage.executeUpdate();
			return true;
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean saveGroupMessage(ChatMessage chatMessage,
			Map<Integer, Boolean> delivered) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean setDeliveredPrivate(int chatID, int userID) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean setDeliveredTeam(int teamID, int userID) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<ChatMessage> getHistoryPrivate(int chatID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<ChatMessage> getHistoryTeam(int teamID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean addUser(String username, int chatID) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeUser(String username, int chatID) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int[] chatMember(int chatID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] getChats(String username) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] getTeams(String username) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean createAccount(Account account) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Account getAccount(String username) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<String> allUsers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] teamMembers(int teamID) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
}
