package server;

import static org.junit.Assert.*;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;

import general.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/*
 * The database must be cleared each time the tests are run
 */
public class DatabaseServerTest {
	

	private Socket socket;
	private ObjectOutputStream out;
	private ObjectInputStream in;
	
	@Before
	public void initialise() throws IOException {
		socket = new Socket("127.0.0.1", 8888);
		out = new ObjectOutputStream(socket.getOutputStream());
		out.flush();
		in = new ObjectInputStream(socket.getInputStream());
	}
	
	@After
	public void finish() throws IOException {
		in.close();
		out.close();
		socket.close();
	}
	
	/**
	 * successfully adding an account
	 */
	@Test
	public void createAccountSuccess1() {
		try {
			out.writeObject(new Message(Message.Status.CREATE_ACCOUNT, 1, 0, new Account("user1", "password", "email@email.com")));
			Message message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * successfully adding an account
	 */
	@Test
	public void createAccountSuccess2() {
		try {
			out.writeObject(new Message(Message.Status.CREATE_ACCOUNT, 1, 1, new Account("user2", "password", "email@email.com")));
			Message message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * fail- account already exists
	 */
	@Test
	public void createAccountFail() {
		try {
			out.writeObject(new Message(Message.Status.CREATE_ACCOUNT, 1, 1, new Account("user2", "password", "email@email.com")));
			Message message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * login success
	 */
	@Test
	public void loginSuccess() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 2, "user1", "password"));
			Message message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * login fail- invalid username
	 */
	@Test
	public void loginFail1() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 3, "user3", "password"));
			Message message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.ERROR);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * login fail- invalid password
	 */
	@Test
	public void loginFail2() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 4, "user1", "password1"));
			Message message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.ERROR);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * view account success (we don't test for an invalid username since this should never happen)
	 */
	@Test
	public void viewAccount01() {
		try {
			out.writeObject(new Message(Message.Status.VIEW_ACCOUNT, 1, 5, "user1"));
			Message message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS && 
					message.getObjects()[0] instanceof Account);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * view account- password null and email correct
	 */
	@Test
	public void viewAccount02() {
		try {
			out.writeObject(new Message(Message.Status.VIEW_ACCOUNT, 1, 6, "user1"));
			Message message = (Message)in.readObject();
			Account account = (Account)message.getObjects()[0];
			assertTrue(account.getUsername().equals("user1") && account.getPassword() == null &&
					account.getEmail().equals("email@email.com"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * all users success
	 */
	@Test
	public void allUsers() {
		try {
			out.writeObject(new Message(Message.Status.ALL_USERS, 1, 7));
			Message message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			ArrayList<String> users = (ArrayList<String>)message.getObjects()[0];
			assertTrue(users.size() == 2 && users.contains("user1") && users.contains("user2"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * all users success
	 */
	@Test
	public void startPrivateChat() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 8, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.START_PRIVATE_CHAT, 1, 9));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS && 
					message.getObjects()[0] instanceof Chat);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * get private messages success
	 */
	@Test
	public void getPrivateMessages1() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 10, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_PRIVATE_CHATS, 1, 11));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS && 
					message.getObjects()[0] instanceof ArrayList);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * get private messages- contains (only) chat with user2
	 */
	@Test
	public void getPrivateMessages2() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 12, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_PRIVATE_CHATS, 1, 13));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			ArrayList<Chat> chats = (ArrayList<Chat>)message.getObjects()[0];
			assertTrue(chats.size() == 1 && chats.get(0).getUsernames().contains("user2"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * send private message success
	 */
	@Test
	public void sendPrivateMessages() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 14, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_PRIVATE_CHATS, 1, 15));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.SEND_PRIVATE_MESSAGE, 1, 16, new ChatMessage(chat.getID(), "hello", null, "user1" )));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.RECEIVE_PRIVATE_MESSAGE &&
					((ChatMessage)message.getObjects()[0]).getMessage().equals("hello") &&
					((ChatMessage)message.getObjects()[0]).getUsername().equals("user1"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * view private chat history
	 */
	@Test
	public void viewPrivateChatHistory1() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 16, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_PRIVATE_CHATS, 1, 17));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.VIEW_PRIVATE_HISTORY, 1, 18, chat.getID()));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS &&
					message.getObjects()[0] instanceof ArrayList);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * view private chat history
	 */
	@Test
	public void viewPrivateChatHistory2() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 18, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_PRIVATE_CHATS, 1, 19));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.VIEW_PRIVATE_HISTORY, 1, 20, chat.getID()));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			ChatMessage chatMessage = ((ArrayList<ChatMessage>)message.getObjects()[0]).get(0);
			assertTrue(chatMessage.getUsername().equals("user1") && chatMessage.getMessage().equals("hello"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	

	/**
	 * create team success
	 */
	@Test
	public void makeTeam() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 21, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.MAKE_TEAM, 1, 22, "team", "user2"));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS &&
					message.getObjects()[0] instanceof Chat);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * get team chats
	 */
	@Test
	public void getTeamChats1() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 23, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_TEAM_CHATS, 1, 24));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS && 
					message.getObjects()[0] instanceof ArrayList);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * get team messages- contains (only) chat with user2
	 */
	@Test
	public void getTeamChats2() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 25, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_PRIVATE_CHATS, 1, 26));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			ArrayList<Chat> chats = (ArrayList<Chat>)message.getObjects()[0];
			assertTrue(chats.size() == 1 && chats.get(0).getUsernames().contains("user2") 
					&& chats.get(0).getTeamname().equals("team"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * send team message
	 */
	@Test
	public void sendTeamMessage() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 27, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_TEAM_CHATS, 1, 28));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.SEND_TEAM_MESSAGE, 1, 29, new ChatMessage(chat.getID(), "hello", null, "user1" )));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.RECEIVE_TEAM_MESSAGE &&
					((ChatMessage)message.getObjects()[0]).getMessage().equals("hello") &&
					((ChatMessage)message.getObjects()[0]).getUsername().equals("user1"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * view team chat history
	 */
	@Test
	public void viewTeamChatHistory1() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 30, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_TEAM_CHATS, 1, 31));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.VIEW_TEAM_HISTORY, 1, 32, chat.getID()));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.SUCCESS &&
					message.getObjects()[0] instanceof ArrayList);
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * view private chat history
	 */
	@Test
	public void viewTeamChatHistory2() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 33, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_TEAM_CHATS, 1, 34));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.VIEW_TEAM_HISTORY, 1, 35, chat.getID()));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			ChatMessage chatMessage = ((ArrayList<ChatMessage>)message.getObjects()[0]).get(0);
			assertTrue(chatMessage.getUsername().equals("user1") && chatMessage.getMessage().equals("hello"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}

	/**
	 * add user for next tests
	 */
	@Test
	public void createAccount() {
		try {
			out.writeObject(new Message(Message.Status.CREATE_ACCOUNT, 1, 36, "user3", "password", "email@email.com"));
		} catch (IOException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * user1 adds user3 to team
	 */
	@Test
	public void addTeamMember() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 37, "user1", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_TEAM_CHATS, 1, 38));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.ADD_USER, 1, 39, "user3", chat));
			message = (Message)in.readObject();
			assertTrue(message.getStatus() == Message.Status.ADD_TEAM_MEMBER &&
					(int)message.getObjects()[0] == chat.getID() &&
					((String)message.getObjects()[1]).equals("user3"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	/**
	 * user3 has access to entire chat history
	 */
	@Test
	public void getTeamHistory() {
		try {
			out.writeObject(new Message(Message.Status.LOGIN, 1, 40, "user3", "password1"));
			Message message = (Message)in.readObject();
			out.writeObject(new Message(Message.Status.GET_TEAM_CHATS, 1, 41));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			Chat chat = ((ArrayList<Chat>)message.getObjects()[0]).get(0);
			out.writeObject(new Message(Message.Status.VIEW_TEAM_HISTORY, 1, 42, chat.getID()));
			message = (Message)in.readObject();
			@SuppressWarnings("unchecked")
			ChatMessage chatMessage = ((ArrayList<ChatMessage>)message.getObjects()[0]).get(0);
			assertTrue(chatMessage.getUsername().equals("user1") && chatMessage.getMessage().equals("hello"));
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			fail();
		}
	}
	
	

	
	
}
