package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;

import general.*;

/**
 * Database class for the DevChat group project. This class runs the JDBC
 * connection for the server and contains all methods for communicating
 * with the postgresql database. All SQL commands are written as prepared
 * statements for the ease of interchangeable variables.
 * @author Sam Joseph (stj485)
 *
 */
public class Database implements Queries {

	private final String URL = "jdbc:postgresql://localhost/dev_chat"; // change as needed
	private final String USERNAME = ""; // change as needed
	private final String PASSWORD = ""; // change as needed
	
	private Connection connection = null;
	
	// PreparedStatements initialised - Those commented out are yet to be implemented
	private PreparedStatement login = null;
	private PreparedStatement usernameFree = null;
	private PreparedStatement getPrivateChat = null;
	private PreparedStatement createPrivateChat = null;
	//private PreparedStatement createTeamChat = null;
	private PreparedStatement savePrivateMessage = null;
	//private PreparedStatement saveTeamMessage = null;
	private PreparedStatement setDeliveredPrivate = null;
	//private PreparedStatement setDeliveredTeam = null;
	private PreparedStatement getHistoryPrivate = null;
	//private PreparedStatement getHistoryTeam = null;
	//private PreparedStatement addUser = null;
	//private PreparedStatement removeUser = null;
	private PreparedStatement chatMember = null;
	//private PreparedStatement teamMembers = null;
	//private PreparedStatement getChats = null;
	//private PreparedStatement getTeams = null;
	
//	/**
//	 * main method for test purposes. Remove as needed
//	 */
//	public static void main(String[] args) {
//		Database d = new Database();
//		System.out.println(d.login("test", "password"));
//	}
	
	/**
	 * Constructor initialises connection and sets text for prepared statements.
	 * 
	 * Need to think about how to re-establish connections if needed
	 */
	public Database() {
		try {
			//connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
			connection = DriverManager.getConnection(URL);
			login = connection.prepareStatement("SELECT user_ID FROM users WHERE username = ? AND password = ?");
			usernameFree = connection.prepareStatement("SELECT user_ID FROM users WHERE username = ?");
			getPrivateChat = connection.prepareStatement("SElECT chat_ID from private_chat WHERE user1 = ? AND user 2 = ?");
			createPrivateChat = connection.prepareStatement("INSERT INTO private_chat (user1, user2) VALUES (?, ?)");
			savePrivateMessage = connection.prepareStatement("INSERT INTO private_messages "
													+ "(chat_id, message_sent, user_posted, text) VALUES (?, ?, ?, ?)");			
			setDeliveredPrivate = connection.prepareStatement("UPDATE private_chat SET ? = false WHERE chat_id = ?");
			chatMember = connection.prepareStatement("SELECT user1, user2 FROM users WHERE chat_id = ?");
			getHistoryPrivate = connection.prepareStatement("SELECT * FROM private_messages WHERE chat_id = ?");
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			System.out.println("not connected");
			System.exit(1);
		}
	}
	
	

	@Override
	public boolean login(String username, String password) {
		ResultSet resultSet = null;
		try {
			login.setString(1, username);
			login.setString(2, password);
			resultSet = login.executeQuery();
			if (resultSet.next()) { 
				return true;
			}
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean usernameFree(String username) {
		ResultSet resultSet = null;
		try {
			usernameFree.setString(1, username);
			resultSet = usernameFree.executeQuery();
			if (!resultSet.isBeforeFirst() ) { // checks if there result set contains anything
				 return true; // resultSet does not contain rows
				} 
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return false;
	}

	@Override
	public int createPrivateChat(String username1, String username2) {
		ResultSet resultSet = null;
		try {
			getPrivateChat.setString(1, username1); 
			getPrivateChat.setString(2, username2); 
			resultSet = getPrivateChat.executeQuery();
			if (resultSet.next()) {
				return resultSet.getInt("chat_id"); // chat already exists
				}
			createPrivateChat.setString(1, username1);
			createPrivateChat.setString(2, username2);
			createPrivateChat.executeUpdate();
			resultSet = getPrivateChat.executeQuery();
			resultSet.next();
			return resultSet.getInt("chat_id"); 
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return -1;
	}

	@Override
	public int createTeam(String... usernames) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	// can this just be void??
	public boolean savePrivateMessage(ChatMessage chatMessage) {
		try {
			savePrivateMessage.setInt(1, chatMessage.getID());
			savePrivateMessage.setString(2, chatMessage.getUsername());
			savePrivateMessage.setTimestamp(3, new java.sql.Timestamp(chatMessage.getTimestamp().getTimeInMillis()));
			savePrivateMessage.setString(4, chatMessage.getMessage());
			savePrivateMessage.executeUpdate();
			// set delivered to true for user who sent the message
			setDeliveredPrivate(chatMessage.getID(), chatMessage.getUsername()); 
			return true;
		}
		catch (SQLException sqlException) {
			// how do we want to handle?
			sqlException.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean saveGroupMessage(ChatMessage chatMessage,
			Map<Integer, Boolean> delivered) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	// can this just be void??
	public boolean setDeliveredPrivate(int chatID, String username) {
		ArrayList<String> result = chatMember(chatID);
		try {
			if (result.get(0).equals(username)) { // user is user1
				setDeliveredPrivate.setString(1, "delivered1");
				setDeliveredPrivate.setInt(2, chatID);
			} else {
				setDeliveredPrivate.setString(1, "delivered2");
				setDeliveredPrivate.setInt(2, chatID);
			}
			setDeliveredPrivate.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public boolean setDeliveredTeam(int teamID, int userID) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<ChatMessage> getHistoryPrivate(int chatID) {
		ArrayList<ChatMessage> chatHistory = new ArrayList<ChatMessage>();
		ResultSet resultSet = null;
		try {
			getHistoryPrivate.setInt(1, chatID);
			resultSet = getHistoryPrivate.executeQuery();
			while (resultSet.next()) {
				Calendar timestamp = Calendar.getInstance();
				timestamp.setTimeInMillis(resultSet.getTimestamp("message_sent").getTime());
				// creates new ChatMessage and adds to the chatHistory array
				chatHistory.add(new ChatMessage(resultSet.getInt("chat_id"), 
				resultSet.getString("user_posted"), timestamp, resultSet.getString("text")));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return chatHistory;
	}

	@Override
	public ArrayList<ChatMessage> getHistoryTeam(int teamID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean addUser(String username, int chatID) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeUser(String username, int chatID) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<String> allUsers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<String> chatMember(int chatID) {
		ResultSet resultSet = null;
		ArrayList<String> result = new ArrayList<String>();
		try {
			chatMember.setInt(1, chatID);
			resultSet = chatMember.executeQuery();
			while (resultSet.next()) {
				result.add(resultSet.getString("user1"));
				result.add(resultSet.getString("user2"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}

	@Override
	public ArrayList<String> teamMembers(int teamID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<Integer>[] getChats(String username) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<Integer>[] getTeams(String username) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public boolean createAccount(Account account) {
		// TODO Auto-generated method stub
		return false;
	}



	@Override
	public Account getAccount(String username) {
		// TODO Auto-generated method stub
		return null;
	}
}