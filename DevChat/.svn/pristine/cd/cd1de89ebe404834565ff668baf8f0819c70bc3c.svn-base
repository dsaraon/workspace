package server;
import general.Account;
import general.Chat;
import general.ChatMessage;
import general.Message;

import java.io.*;
import java.net.*;
import java.util.*;

import database.*;

public class Server {
	
	private ServerSocket serverSocket;
	private Map<Integer, Connection> connections;
	private Map<String, Integer> loggedIn; //maps usernames to sessionIDs
	private Integer sessionIDCounter;
	private Integer messageCounter;
	private Queries database;
	
	public Server(int port) throws IOException {
		serverSocket = new ServerSocket(port);
		connections = new HashMap<Integer, Connection>();
		loggedIn = new HashMap<String, Integer>();
		sessionIDCounter = 1;
		loggedIn.put("A", 1);
		loggedIn.put("B", 2);
		messageCounter = 1;
		database = new TestDatabase();
		
	}
	
	
	//some of these methods are calling each other- does synchronization still work?
	private synchronized void addConnection(int sessionID, Connection connection) {
		connections.put(sessionID, connection);
	}
	
	private synchronized String getUsername(int sessionID) {
		Set<Map.Entry<String, Integer>> set = loggedIn.entrySet();
		for (Map.Entry<String, Integer> entry : set) {
			if (entry.getValue().equals(sessionID)) {
				return entry.getKey();
			}
		}
		return null;
			
	}
	
	protected synchronized void removeConnection(int sessionID) {
		String username = getUsername(sessionID);
		if (username != null) {
			removeLoggedIn(username);
		}
		connections.remove(sessionID);
	}
	
	protected synchronized void addLoggedIn(String username, int sessionID) {
		loggedIn.put(username, sessionID);
	}
	
	protected synchronized void removeLoggedIn(String username) {
		loggedIn.remove(username);
	}
	
	protected void removeLoggedIn(int sessionID) {
		String username = getUsername(sessionID);
		if (username != null) {
			removeLoggedIn(username);
		}
	}
	
	
	public static void main(String [] args) {
		Server server;
		try {
			server = new Server(Integer.parseInt(args[0]));
			System.out.println("server connected");
			while(true) {
				//once server has been created, listen continuously for connections
				try {
					Socket clientSocket = server.serverSocket.accept();
					System.out.println("Connection added");
					server.addConnection(server.sessionIDCounter, new Connection(server, clientSocket, server.sessionIDCounter));
					server.sessionIDCounter++;
				} catch (IOException e) {
					System.out.println("unable to connect with socket");
				}
			}
		} catch (IOException e) {
			System.out.println("Unable to connect on port number " + args[0]); //or something along those lines
		}
	}
	
	//these methods will need some form of synchronisation
	
	protected synchronized void login(String username, String password) throws Exception {
		database.login(username, password);
	}
	
	protected synchronized void sendPrivateMessage(ChatMessage chatMessage) throws Exception {
		//ArrayList<String> members = Methods.getChatMembers(chatMessage.getID());
		System.out.println("Server.sendPrivateMessage");
		String [] members = {"A", "B"};
		//database.savePrivateMessage(chatMessage);
		for (String username : members) {
			if (loggedIn.containsKey(username)) {
				int id = loggedIn.get(username);
				Connection send = connections.get(id);
				send.sendMessage(new Message(Message.Status.RECEIVE_PRIVATE_MESSAGE, 0, messageCounter, chatMessage));
				System.out.println("sent to " + username);
				messageCounter++;
				//database.setDeliveredPrivate(chatMessage.getID(), username);
			}
		}		
	}
	
	//how will we process confirmation??
	
	/**
	 * 
	 * @param chatMessage
	 * @throws Exception
	 */
	protected synchronized void sendTeamMessage(ChatMessage chatMessage) throws Exception {
		//ArrayList<String> members = Methods.getTeamMembers(chatMessage.getID());
		String [] members = {"A", "B"};
		database.savePrivateMessage(chatMessage);
		for (String username : members) {
			if (loggedIn.containsKey(username)) {
				int id = loggedIn.get(username);
				Connection send = connections.get(id);
				send.sendMessage(new Message(Message.Status.RECEIVE_TEAM_MESSAGE, 0, messageCounter, chatMessage));
				messageCounter++;
				//database.setDeliveredTeam(chatMessage.getID(), username);
			}
		}	
	}
	
	/**
	 * asks the database to create a new account
	 * @param sessionID
	 * @param account
	 * @throws Exception if account cannot be created
	 */
	protected synchronized void createAccount(int sessionID, Account account) throws Exception {
		String username = account.getUsername();
		if (database.usernameFree(username)) {
			database.createAccount(account);
			addLoggedIn(username, sessionID);
		} else {
			throw new Exception("username already taken");
		}
	}
	
	/**
	 * 
	 * @param username
	 * @return the account belonging to the username
	 * @throws Exception
	 */
	protected synchronized Account viewAccount(String username) throws Exception {
		return database.getAccount(username);
	}
	
	/**
	 * 
	 * @return a set of users currently online
	 */
	protected synchronized ArrayList<String> usersOnline()  {
		return new ArrayList<String>(loggedIn.keySet());
	}
	
	/**
	 * 
	 * @return a list of usernames for all accounts
	 * @throws Exception
	 */
	protected synchronized ArrayList<String> allUsers() throws Exception {
		return database.allUsers();
	}

	//new Javadoc
	protected synchronized Chat startPrivateChat(int sessionID, String username) throws Exception {
		return database.createPrivateChat(getUsername(sessionID), username);
	}
	
	//ditto
	

	protected synchronized Chat makeTeam(int sessionID, String teamname, String [] usernames) throws Exception {
		return  database.createTeam(teamname, usernames);

	}
	
	//will probably be changed to specify how many previous messages!
	
	/**
	 * 
	 * @param chatID
	 * @return a list of messages
	 * @throws Exception
	 */
	protected synchronized ArrayList<ChatMessage> viewPrivateHistory(int chatID) throws Exception {
		return database.getHistoryPrivate(chatID);
	}
	
	/**
	 * 
	 * @param teamID
	 * @return a list of messages
	 * @throws Exception
	 */
	protected synchronized ArrayList<ChatMessage> viewTeamHistory(int teamID) throws Exception {
		return database.getHistoryTeam(teamID);
	}
	
	/**
	 * adds a user to a team
	 * @param username
	 * @param teamID
	 * @throws Exception
	 */
	protected synchronized void addUser(String username, int teamID) throws Exception {
		database.addUser(username, teamID);
	}
	
	/**
	 * removes user from a team 
	 * @param username
	 * @param teamID
	 * @throws Exception
	 */
	protected synchronized void removeUser(String username, int teamID) throws Exception {
		database.removeUser(username, teamID);
	}
	
	/**
	 * 
	 * @param sessionID
	 * @return
	 * @throws Exception
	 */
	protected synchronized ArrayList<Chat> getChats(int sessionID) throws Exception {
		return database.getChats(getUsername(sessionID));
	}
	
	/**
	 * 
	 * @param sessionID
	 * @return
	 * @throws Exception
	 */
	protected synchronized ArrayList<Integer> getTeams(int sessionID) throws Exception{
		return new ArrayList<Integer>();
	}
	
	/**
	 * 
	 * @param chatID
	 * @return
	 * @throws Exception
	 */
	protected synchronized ArrayList<String> getChatMembers(int chatID) throws Exception {
		return new ArrayList<String>();
	}
	
	/**
	 * 
	 * @param teamID
	 * @return
	 * @throws Exception
	 */
	protected synchronized ArrayList<String> getTeamMembers(int teamID) throws Exception {
		return new ArrayList<String>();
	}
	
	/**
	 * 
	 * @param username
	 * @param chatID
	 * @throws Exception
	 */
	protected synchronized void setDeliveredPrivate(String username, int chatID) throws Exception {}
	
	/**
	 * 
	 * @param username
	 * @param teamID
	 * @throws Exception
	 */
	protected synchronized void setDeliveredTeam(String username, int teamID) throws Exception {}
	
}
