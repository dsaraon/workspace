package client;

import general.*;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;


public class TeamChatGUI extends JFrame implements Observer, ActionListener {
	
	/**
	 * Serial Version
	 */
	private static final long serialVersionUID = 1L;
	
	static final private String SEND_MESSAGE = "sendMessage";

	// Add Observable Class
//	private Client client; // Declare Client (Backend)
	//*******This should have ChatWindow and not Client *******
	private ChatWindow chatWindow;
	private Thread thread;
	private String username;
	
	JTextArea membersList;
	JTextArea mainText;
	JTextArea sendText;
	JButton sendMessage;
	
	/**
	 * Constructor for Chat GUI
	 * @param client - Backend driving the output
	 */
	
//	public TeamChatGUI() {
	public TeamChatGUI(ChatWindow chatWindow, String username) { // Used for testing GUI on its own
		super(chatWindow.getChat().getTeamname()); // Create new Frame with title
//		this.client = client; // Integrate GUI with backend
		//***I've added chatWindow instead of Client ****
		this.chatWindow = chatWindow;
		
		//client.addObserver(this); // Setup observer with observable
		//***alternative observable****
		chatWindow.addObserver(this);
		thread = new Thread(chatWindow);
		thread.start();
		this.username = username;
		
		setSize(500, 610); // Set Size
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close Operation
		//GridLayout layout = new GridLayout(3, 1, 20, 20); // Create GridLayout 4x1
		JPanel main = new JPanel();
		BoxLayout box = new BoxLayout(main, BoxLayout.Y_AXIS);
		main.setLayout(box); // Set Layout
		Font font = new Font("Calibri", Font.BOLD, 16);
		
		// Setup Row 1 - Logo
		JPanel row1 = new JPanel();
		row1.setLayout(new BorderLayout()); // Allows logo to be placed far left
		row1.setBorder(BorderFactory.createEmptyBorder(5,5,0,0)); // Adds 5 pixels to left
		row1.add(new ToolbarPanelChatGUI());
		//row1.add(Help.createPicture("devchatlogosmall.png"), BorderLayout.WEST); // Add logo
		main.add(row1); // Add row to Main Frame
		
		// Setup Row 2 - List of team members
		JPanel row2 = new JPanel();
		JLabel membersLabel = new JLabel("<html>Team<br>Members:</html>");
		row2.add(membersLabel);
		membersList = new JTextArea(2, 30);
		membersList.setEditable(false);
		row2.add(membersList);
		membersList.setLineWrap(true);
		membersList.setWrapStyleWord(true);
		membersList.setFont(font);
		// Add Scroll Pane with no sliders
		JScrollPane scroll = new JScrollPane(membersList,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		row2.add(scroll); // Add components to panel
		main.add(row2); // Add Panel to Frame
		
		// Setup Row 3 - Message History
		JPanel row3 = new JPanel();
		mainText = new JTextArea(15, 35);
		mainText.setEditable(false);
		row3.add(mainText);
		mainText.setLineWrap(true);
		mainText.setWrapStyleWord(true);
		mainText.setFont(font);
		// Add Scroll Pane with no sliders
		JScrollPane scroll2 = new JScrollPane(mainText,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		row3.add(scroll2); // Add components to panel
		main.add(row3); // Add Panel to Frame
				
		// Setup Row 4 - Send Message
		JPanel row4 = new JPanel();
		sendText = new JTextArea(6, 30);
		row4.setBorder(BorderFactory.createEmptyBorder(0,1,0,0));
		row4.add(sendText); // Add Send Textbox
		sendText.setLineWrap(true);
		sendText.setWrapStyleWord(true);
		sendText.setFont(font);
		// Add Scroll Pane with no sliders
		JScrollPane scroll3 = new JScrollPane(sendText,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		row4.add(scroll3); // Add components to panel
		sendMessage = new JButton("Send");
		row4.add(sendMessage); // Add Send Message Button
		main.add(row4); // Add Panel to Frame
				
		// Add Action Listeners and Commands
		sendMessage.setActionCommand(SEND_MESSAGE);
		sendMessage.addActionListener(this); // Send Button Action
		
		add(main); // Add main frame
		
		setVisible(true); // Make Frame Visible
	}
	
	/**
	 * Execute instance methods in Model dependent upon which button has been clicked
	 */
	
	@Override
	public void actionPerformed(ActionEvent e) {
		String cmd = e.getActionCommand();
		
		switch(cmd){
		case SEND_MESSAGE:
			//client.sendMessage(chatId, username, message);
			//client.sendMessage(0, "username", "message");
			//***ONLY SENDING PRIVATE MESSAGE FOR NOW SINCE PRIVATE AND TEAM CLASSES UNDEFINED
			//ChatMessage chatMessage = new ChatMessage(0, "mockUserName", "MockMessage" );//how is this defined?
			//how are chatID's created?
			//chatWindow.sendPrivateMessage(chatMessage);
			//sendText.setText("");
			//break;
			ChatMessage chatMessage = new ChatMessage(chatWindow.getChat().getID() ,
												username, 
												sendText.getText());
		chatWindow.sendTeamMessage(chatMessage);
		sendText.setText("");
		break;
		}
	}
	
	/**
	 * Method called when the observable object changes (in this case when text output changes)
	 */
	
	@Override
	public void update(Observable o, Object arg) {
		if(o instanceof ChatWindow){
			GUIMessage message = (GUIMessage)arg;
			switch(message.getStatus()){
			case DISPLAY_MESSAGE:
				String u = ((ChatMessage)message.getObject()).getUsername();
				String m = ((ChatMessage)message.getObject()).getMessage();
				mainText.append(u + " >>> " + m + "\n");
				break;
			case HISTORY:
				@SuppressWarnings("unchecked")
				ArrayList<ChatMessage> chatHistory = (ArrayList<ChatMessage>) message.getObject();
				for(ChatMessage cM : chatHistory){
					
					String s = cM.getMessage();
					mainText.append(s);	
				}
				break;
			}
		}
	}
	
	public static void main(String[] args) {
		//TeamChatGUI chat = new TeamChatGUI(); // Used for testing GUI on its own
	}
}
